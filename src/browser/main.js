// Generated by CoffeeScript 1.10.0
(function() {
  var app, declareOptions, fs, handleStartupEventWithSquirrel, mkdirp, parseCommandLine, path, setupCompileCache, setupConfigDir, setupErrorLogger, start;

  global.shellStartTime = Date.now();

  process.on('uncaughtException', function(error) {
    if (error == null) {
      error = {};
    }
    if (error.message != null) {
      console.log(error.message);
    }
    if (error.stack != null) {
      return console.log(error.stack);
    }
  });

  app = require('electron').app;

  fs = require('fs-plus');

  path = require('path');

  mkdirp = require('mkdirp');

  start = function() {
    var addUrlToOpen, args, configDirPath;
    args = parseCommandLine();
    global.errorLogger = setupErrorLogger(args);
    configDirPath = setupConfigDir(args);
    args.configDirPath = configDirPath;
    setupCompileCache(configDirPath);
    if (handleStartupEventWithSquirrel()) {
      return;
    }
    app.setAppUserModelId('com.squirrel.nylas.nylas');
    addUrlToOpen = function(event, urlToOpen) {
      event.preventDefault();
      return args.urlsToOpen.push(urlToOpen);
    };
    app.on('open-url', addUrlToOpen);
    return app.on('ready', function() {
      var Application;
      app.removeListener('open-url', addUrlToOpen);
      Application = require(path.join(args.resourcePath, 'src', 'browser', 'application'));
      Application.open(args);
      if (!args.specMode) {
        return console.log("App load time: " + (Date.now() - global.shellStartTime) + "ms");
      }
    });
  };

  setupConfigDir = function(args) {
    var configDirPath, defaultConfigDir, ref, ref1, winattr;
    if (args.specMode) {
      defaultConfigDir = path.join(app.getPath('home'), '.nylas-spec');
    } else {
      defaultConfigDir = path.join(app.getPath('home'), '.nylas');
    }
    configDirPath = (ref = (ref1 = args.configDirPath) != null ? ref1 : process.env.NYLAS_HOME) != null ? ref : defaultConfigDir;
    mkdirp.sync(configDirPath);
    if (process.platform === 'win32') {
      winattr = require('winattr');
      winattr.setSync(configDirPath, {
        hidden: true
      });
    }
    process.env.NYLAS_HOME = configDirPath;
    return configDirPath;
  };

  handleStartupEventWithSquirrel = function() {
    var SquirrelUpdate, squirrelCommand;
    if (process.platform !== 'win32') {
      return false;
    }
    SquirrelUpdate = require('./squirrel-update');
    squirrelCommand = process.argv[1];
    return SquirrelUpdate.handleStartupEvent(app, squirrelCommand);
  };

  setupCompileCache = function(configDirPath) {
    var compileCache;
    compileCache = require('../compile-cache');
    return compileCache.setHomeDirectory(configDirPath);
  };

  setupErrorLogger = function(args) {
    var ErrorLogger;
    if (args == null) {
      args = {};
    }
    ErrorLogger = require('../error-logger');
    return new ErrorLogger({
      inSpecMode: args.specMode,
      inDevMode: args.devMode,
      resourcePath: args.resourcePath
    });
  };

  declareOptions = function(argv) {
    var optimist, options;
    optimist = require('optimist');
    options = optimist(argv);
    options.usage("Nylas N1 v" + (app.getVersion()) + "\n\nUsage: n1 [options]\n\nRun N1: The open source extensible email client\n\n`n1 --dev` to start the client in dev mode.\n\n`n1 --test` to run unit tests.");
    options.alias('d', 'dev').boolean('d').describe('d', 'Run in development mode.');
    options.alias('t', 'test').boolean('t').describe('t', 'Run the specified specs and exit with error code on failures.');
    options.boolean('safe').describe('safe', 'Do not load packages from ~/.nylas/packages or ~/.nylas/dev/packages.');
    options.alias('h', 'help').boolean('h').describe('h', 'Print this usage message.');
    options.alias('l', 'log-file').string('l').describe('l', 'Log all test output to file.');
    options.alias('c', 'config-dir-path').string('c').describe('c', 'Override the path to the N1 configuration directory');
    options.alias('s', 'spec-directory').string('s').describe('s', 'Override the directory from which to run package specs');
    options.alias('f', 'spec-file-pattern').string('f').describe('f', 'Override the default file regex to determine which tests should run (defaults to "-spec\.(coffee|js|jsx|cjsx|es6|es)$" )');
    options.alias('v', 'version').boolean('v').describe('v', 'Print the version.');
    return options;
  };

  parseCommandLine = function() {
    var args, configDirPath, devMode, logFile, options, ref, resourcePath, safeMode, showSpecsInWindow, specDirectory, specFilePattern, specMode, urlsToOpen, version;
    version = app.getVersion();
    options = declareOptions(process.argv.slice(1));
    args = options.argv;
    if (args.help) {
      process.stdout.write(options.help());
      process.exit(0);
    }
    if (args.version) {
      process.stdout.write(version + "\n");
      process.exit(0);
    }
    devMode = args['dev'] || args['test'];
    logFile = args['log-file'];
    specMode = args['test'];
    safeMode = args['safe'];
    configDirPath = args['config-dir-path'];
    specDirectory = args['spec-directory'];
    specFilePattern = args['spec-file-pattern'];
    showSpecsInWindow = specMode === "window";
    resourcePath = path.resolve((ref = args['resource-path']) != null ? ref : path.dirname(path.dirname(__dirname)));
    urlsToOpen = [];
    if (args['path-environment']) {
      process.env.PATH = args['path-environment'];
    }
    return {
      version: version,
      devMode: devMode,
      logFile: logFile,
      specMode: specMode,
      safeMode: safeMode,
      configDirPath: configDirPath,
      specDirectory: specDirectory,
      specFilePattern: specFilePattern,
      showSpecsInWindow: showSpecsInWindow,
      resourcePath: resourcePath,
      urlsToOpen: urlsToOpen
    };
  };

  start();

}).call(this);
